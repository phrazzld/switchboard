#!/bin/sh
#
# Pre-commit hook for Rust projects
# Runs cargo fmt and cargo clippy before allowing commit

# Define line count thresholds
WARN_LINES=500
ERROR_LINES=1000

# Store the colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

echo "${YELLOW}Running pre-commit checks...${NC}"

# Get list of staged Rust files (excluding deleted files)
STAGED_RS_FILES=$(git diff --name-only --cached --diff-filter=ACM | grep "\.rs$" || true)

# Check if any Rust files are staged
if [ -n "$STAGED_RS_FILES" ]; then
    echo "${YELLOW}Rust files detected in staged changes. Running Rust-specific checks...${NC}"
    # Check line counts for each staged Rust file
    echo "${YELLOW}Checking line counts in Rust files...${NC}"
    # Flag to track if any files exceed the error threshold
    error_found=0
    
    for file in $STAGED_RS_FILES; do
        # Skip files that don't exist (might have been deleted after staging)
        if [ -f "$file" ]; then
            # Get line count for the file
            line_count=$(wc -l < "$file" | awk '{print $1}')
            
            if [ "$line_count" -gt "$ERROR_LINES" ]; then
                # Exceeds error threshold
                echo "${RED}Error: File $file has $line_count lines (exceeds limit of $ERROR_LINES).${NC}"
                echo "Please refactor this file into smaller modules."
                error_found=1
            elif [ "$line_count" -gt "$WARN_LINES" ]; then
                # Exceeds warning threshold
                echo "${YELLOW}Warning: File $file has $line_count lines (exceeds recommended limit of $WARN_LINES).${NC}"
                echo "Consider refactoring this file into smaller modules in the future."
            fi
        fi
    done
    
    # Exit with error if any files exceeded the error threshold
    if [ "$error_found" -eq 1 ]; then
        echo "${RED}Error: Commit blocked due to files exceeding the maximum line count.${NC}"
        exit 1
    fi

    # Run cargo fmt
    echo "${YELLOW}Running cargo fmt --check...${NC}"
    cargo fmt --check
    if [ $? -ne 0 ]; then
        echo "${RED}Error: Formatting check failed.${NC}"
        echo "Run 'cargo fmt' to fix formatting issues."
        exit 1
    fi

    # Run cargo clippy with strict settings
    echo "${YELLOW}Running cargo clippy...${NC}"
    cargo clippy -- -D warnings
    if [ $? -ne 0 ]; then
        echo "${RED}Error: Linting check failed.${NC}"
        echo "Fix the linting issues before committing."
        exit 1
    fi
    
    # Run tests
    echo "${YELLOW}Note: Tests might take some time to complete. Please be patient...${NC}"
    echo "${YELLOW}Running cargo test...${NC}"
    cargo test
    if [ $? -ne 0 ]; then
        echo "${RED}Error: Tests failed.${NC}"
        echo "Fix the failing tests before committing."
        exit 1
    fi
else
    echo "${GREEN}No Rust files staged. Skipping Rust-specific checks.${NC}"
fi

echo "${GREEN}All checks passed!${NC}"
exit 0
